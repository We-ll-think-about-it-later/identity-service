// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/authenticate": {
            "post": {
                "description": "Authenticates a user and sends a verification code to their email. Returns the user's UUID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate",
                "parameters": [
                    {
                        "description": "Authentication request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AuthenticateRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SHA-256 hash of device fingerprint",
                        "name": "X-Device-Fingerprint",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/types.AuthenticateResponseBody"
                        }
                    },
                    "201": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/types.AuthenticateResponseBody"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "description": "Retrieves access and refresh tokens after verification code entry.  The refresh token is set in an HTTP-only cookie by the API Gateway.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "GetTokens",
                "parameters": [
                    {
                        "description": "Get tokens request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.GetTokensRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "X-User-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SHA-256 hash of device fingerprint",
                        "name": "X-Device-Fingerprint",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens issued",
                        "schema": {
                            "$ref": "#/definitions/types.GetTokensResponseBody"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "401": {
                        "description": "Invalid user ID or user not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "403": {
                        "description": "Invalid verification code",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    }
                }
            }
        },
        "/auth/token/refresh": {
            "post": {
                "description": "Refreshes the access token. The refresh token is retrieved from an HTTP-only cookie by the API Gateway.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh",
                "parameters": [
                    {
                        "description": "Refresh request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RefreshRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "X-User-Id",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SHA-256 hash of device fingerprint",
                        "name": "X-Device-Fingerprint",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access token refreshed",
                        "schema": {
                            "$ref": "#/definitions/types.RefreshResponseBody"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "401": {
                        "description": "Invalid user ID or user not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "403": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    }
                }
            }
        },
        "/users/search": {
            "get": {
                "description": "Searches for users by username using fuzzy matching.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "SearchUsers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search term for username",
                        "name": "searchTerm",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SHA-256 hash of device fingerprint",
                        "name": "X-Device-Fingerprint",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserSearchResultResponseBody"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/profile": {
            "get": {
                "description": "Gets user profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "GetUserProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "SHA-256 hash of device fingerprint",
                        "name": "X-Device-Fingerprint",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile found",
                        "schema": {
                            "$ref": "#/definitions/types.UserProfileResponseBody"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "404": {
                        "description": "User or profile not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates user profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "CreateUserProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create user profile request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserProfileRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SHA-256 hash of device fingerprint",
                        "name": "X-Device-Fingerprint",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Profile created",
                        "schema": {
                            "$ref": "#/definitions/types.UserProfileResponseBody"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "409": {
                        "description": "Username already taken\" // Added 409 conflict",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates user profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "UpdateUserProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user profile request body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserProfileRequestBody"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SHA-256 hash of device fingerprint",
                        "name": "X-Device-Fingerprint",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated",
                        "schema": {
                            "$ref": "#/definitions/types.UserProfileResponseBody"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "404": {
                        "description": "User or profile not found",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "409": {
                        "description": "Username already taken\" // Added 409 conflict",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/types.ErrorResponseBody"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ProfileInfo": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "types.AuthenticateRequestBody": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "types.AuthenticateResponseBody": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.CreateUserProfileRequestBody": {
            "type": "object",
            "required": [
                "firstname",
                "username"
            ],
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.ErrorResponseBody": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.GetTokensRequestBody": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "integer"
                }
            }
        },
        "types.GetTokensResponseBody": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "types.RefreshRequestBody": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "types.RefreshResponseBody": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "types.UpdateUserProfileRequestBody": {
            "type": "object",
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.UserProfileResponseBody": {
            "type": "object",
            "properties": {
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.UserSearchResultResponseBody": {
            "type": "object",
            "properties": {
                "profile": {
                    "description": "Include profile info if available",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ProfileInfo"
                        }
                    ]
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Identity service",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
